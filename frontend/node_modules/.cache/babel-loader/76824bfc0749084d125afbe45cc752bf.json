{"ast":null,"code":"var _jsxFileName = \"D:\\\\ECE\\\\ING 4\\\\PPE\\\\frontend\\\\src\\\\component\\\\Graph.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, LineChart } from 'recharts';\nimport Select from 'react-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Graph() {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [options, setOptions] = useState([]);\n  const [firstLabel, setFirstLable] = useState('FR');\n  const [secondLable, setSecondLable] = useState('ITALY');\n  const [firstSelect, setFirstSelect] = useState(129);\n  const [secondSelect, setSecondSelect] = useState(152);\n\n  const runCall = async () => {\n    let apiValue = await fetchData();\n    const header = apiValue.split('\\n').slice(0).map(line => line.split(','))[0].slice(4);\n    const firstPrep = apiValue.split('\\n').slice(0).map(line => line.split(','))[firstSelect];\n    const secondPrep = apiValue.split('\\n').slice(0).map(line => line.split(','))[secondSelect];\n    const firstLbl = firstPrep[1].toUpperCase();\n    const secondLbl = secondPrep[1].toUpperCase();\n    const chartData = [];\n\n    for (let i = 0; i < header.length; i++) {\n      const newRow = {};\n      newRow.name = header[i];\n      newRow[firstLbl] = parseInt(firstPrep[i]);\n      newRow[secondLbl] = parseInt(secondPrep[i]);\n      chartData.push(newRow);\n    }\n\n    const countriesList = apiValue.split('\\n').slice(1).map(line => line.split(',').slice(0, 2));\n    const countriesArr = [];\n\n    for (let i = 0; i < countriesList.length; i++) {\n      countriesArr.push({\n        label: countriesList[i].reverse().join(' : '),\n        value: i + 1\n      });\n    }\n\n    setFirstLable(firstLbl);\n    setSecondLable(secondLbl);\n    setOptions(countriesArr);\n    setData(chartData);\n    setIsLoading(false);\n    return null;\n  };\n\n  const fetchData = async () => {\n    const requestOption = {\n      method: \"GET\",\n      redirect: \"follow\"\n    };\n    const URL = `https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv`;\n\n    try {\n      const response = await fetch(URL, requestOption);\n      return response.ok ? response.text() : null;\n    } catch (err) {\n      console.log(err);\n      return null;\n    }\n  };\n\n  useEffect(() => {\n    runCall();\n  }, [firstSelect, secondSelect]);\n\n  const firstInput = input => {\n    setFirstSelect(input.value);\n  };\n\n  const secondInput = input => {\n    setSecondSelect(input.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-wrapper\",\n    children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-wrap\",\n      style: {\n        width: '100%',\n        height: '70%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        aspect: 1.5,\n        children: /*#__PURE__*/_jsxDEV(LineChart, {\n          width: 800,\n          height: 500,\n          data: data,\n          margin: {\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5\n          },\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: firstLabel,\n            stroke: \"#8884d8\",\n            activeDot: {\n              r: 8\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: secondLable,\n            stroke: \"#87d110\",\n            activeDot: {\n              r: 8\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selector-wrap\",\n        children: [/*#__PURE__*/_jsxDEV(Select, {\n          options: options,\n          onChange: firstInput,\n          placeholder: \"FRANCE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          options: options,\n          onChange: secondInput,\n          placeholder: \"ITALY\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 13\n  }, this);\n}\n\n_s(Graph, \"DNBPZVM0WxbCer0bL5FvjxaSP94=\");\n\n_c = Graph;\nexport default Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["D:/ECE/ING 4/PPE/frontend/src/component/Graph.js"],"names":["React","useState","useEffect","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","LineChart","Select","Graph","data","setData","isLoading","setIsLoading","options","setOptions","firstLabel","setFirstLable","secondLable","setSecondLable","firstSelect","setFirstSelect","secondSelect","setSecondSelect","runCall","apiValue","fetchData","header","split","slice","map","line","firstPrep","secondPrep","firstLbl","toUpperCase","secondLbl","chartData","i","length","newRow","name","parseInt","push","countriesList","countriesArr","label","reverse","join","value","requestOption","method","redirect","URL","response","fetch","ok","text","err","console","log","firstInput","input","secondInput","width","height","top","right","left","bottom","r"],"mappings":"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","sourcesContent":["import React,{useState, useEffect} from 'react'\nimport {\n    Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, LineChart,\n  } from 'recharts';\n  import Select from 'react-select';\n\n\nfunction Graph() {\n    const [data, setData] = useState(null);\n    const [isLoading, setIsLoading] = useState(true);\n    const [options, setOptions] = useState([])\n    const [firstLabel, setFirstLable] = useState('FR');\n    const [secondLable, setSecondLable] = useState('ITALY');\n    const [firstSelect, setFirstSelect] = useState(129);\n    const [secondSelect, setSecondSelect] = useState(152);\n\n        const runCall =async() => {\n            let apiValue = await fetchData();\n            const header = apiValue.split('\\n').slice(0).map(line => (line.split(',')))[0].slice(4);\n\n            const firstPrep = apiValue.split('\\n').slice(0).map(line => (line.split(',')))[firstSelect]\n            const secondPrep = apiValue.split('\\n').slice(0).map(line => (line.split(',')))[secondSelect]\n\n            const firstLbl = firstPrep[1].toUpperCase();\n            const secondLbl = secondPrep[1].toUpperCase();\n            \n            const chartData =[];\n            for (let i=0; i<header.length ; i++){\n                const newRow ={};\n                newRow.name = header[i];\n                newRow[firstLbl] = parseInt(firstPrep[i]);\n                newRow[secondLbl] = parseInt(secondPrep[i]);\n                chartData.push(newRow);\n            }\n            const countriesList = apiValue.split('\\n').slice(1).map(line => (line.split(',').slice(0, 2)));\n            const countriesArr = [];\n            for (let i = 0; i < countriesList.length; i++) {\n            countriesArr.push({ label: countriesList[i].reverse().join(' : '), value: i + 1 })\n            }\n\n            setFirstLable(firstLbl);\n            setSecondLable(secondLbl);\n            setOptions(countriesArr)\n            setData(chartData);\n            setIsLoading(false);\n            return null;\n        }\n        const fetchData = async() => {\n            const requestOption = {\n                method: \"GET\",\n                redirect: \"follow\"\n            }\n            const URL= `https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv`\n\n            try {\n                const response = await fetch(URL,requestOption);\n                return response.ok ? response.text() : null\n            } catch (err) {\n                console.log(err);\n                return null;\n            }\n        }\n        useEffect(() => {\n            runCall();\n          }, [firstSelect, secondSelect])\n        \n          const firstInput = (input) => {\n            setFirstSelect(input.value)\n          }\n        \n          const secondInput = (input) => {\n            setSecondSelect(input.value)\n          }\n        return(\n            <div className=\"chart-wrapper\">\n                {isLoading ?\n                    <div>loading...</div> :\n                    <div className=\"content-wrap\" style={{ width: '100%', height: '70%' }}>\n                    <ResponsiveContainer aspect={1.5}>\n                    <LineChart\n                    width={800}\n                    height={500}\n                        data={data}\n                        margin={{\n                            top: 5, right: 30, left: 20, bottom: 5,\n                        }}\n                    >\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"name\" />\n                        <YAxis />\n                        <Tooltip />\n                        <Legend />\n                        <Line type=\"monotone\" dataKey={firstLabel} stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n                        <Line type=\"monotone\" dataKey={secondLable} stroke=\"#87d110\" activeDot={{ r: 8 }} />\n                    </LineChart>\n                    </ResponsiveContainer>\n                    <div className=\"selector-wrap\">\n                        <Select options={options} onChange={firstInput} placeholder=\"FRANCE\" />\n                        <Select options={options} onChange={secondInput} placeholder=\"ITALY\" />\n                    </div>\n                    </div>\n                }\n            </div>\n        );\n    \n}export default Graph;"]},"metadata":{},"sourceType":"module"}